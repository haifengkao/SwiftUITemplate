protocol AutoLenses {}

/// A target of a project.
public struct Target: Codable, Equatable, AutoLenses {
    /// The name of the target. Also, the product name if not specified with ``productName``.
    public let name: String

    /// The platform the target product is built for.
    public let platform: ProjectDescription.Platform

    /// The type of build product this target will output.
    public let product: ProjectDescription.Product

    /// The built product name. If nil, it will be equal to ``name``.
    public let productName: String?

    /// The product bundle identifier.
    public let bundleId: String

    /// The minimum deployment target your product will support.
    public let deploymentTarget: ProjectDescription.DeploymentTarget?

    /// The Info.plist representation.
    public let infoPlist: ProjectDescription.InfoPlist?

    /// The source files of the target.
    /// Note: any playgrounds matched by the globs used in this property will be automatically added.
    public let sources: ProjectDescription.SourceFilesList?

    /// The resource files of target.
    /// Note: localizable files, `*.lproj`, are supported.
    public let resources: ProjectDescription.ResourceFileElements?

    /// The build phase copy files actions for the target.
    public let copyFiles: [ProjectDescription.CopyFilesAction]?

    /// The headers for the target.
    public let headers: ProjectDescription.Headers?

    /// The entitlements file path for the target.
    public let entitlements: ProjectDescription.Path?

    /// The build phase scripts actions for the target.
    public let scripts: [ProjectDescription.TargetScript]

    /// The target's dependencies.
    public let dependencies: [ProjectDescription.TargetDependency]

    /// The target's settings.
    public let settings: ProjectDescription.Settings?

    /// The Core Data models.
    public let coreDataModels: [ProjectDescription.CoreDataModel]

    /// The environment variables. Used by autogenerated schemes for the target.
    public let environment: [String: String]

    /// The launch arguments. Used by autogenerated schemes for the target.
    public let launchArguments: [ProjectDescription.LaunchArgument]

    /// The additional files for the target. For project's additional files, see ``Project/additionalFiles``.
    public let additionalFiles: [ProjectDescription.FileElement]

    public init(name: String, platform: ProjectDescription.Platform, product: ProjectDescription.Product, productName: String? = nil, bundleId: String, deploymentTarget: ProjectDescription.DeploymentTarget? = nil, infoPlist: ProjectDescription.InfoPlist? = .default, sources: ProjectDescription.SourceFilesList? = nil, resources: ProjectDescription.ResourceFileElements? = nil, copyFiles: [ProjectDescription.CopyFilesAction]? = nil, headers: ProjectDescription.Headers? = nil, entitlements: ProjectDescription.Path? = nil, scripts: [ProjectDescription.TargetScript] = [], dependencies: [ProjectDescription.TargetDependency] = [], settings: ProjectDescription.Settings? = nil, coreDataModels: [ProjectDescription.CoreDataModel] = [], environment: [String: String] = [:], launchArguments: [ProjectDescription.LaunchArgument] = [], additionalFiles: [ProjectDescription.FileElement] = [])

    /// Returns a Boolean value indicating whether two values are equal.
    ///
    /// Equality is the inverse of inequality. For any values `a` and `b`,
    /// `a == b` implies that `a != b` is `false`.
    ///
    /// - Parameters:
    ///   - lhs: A value to compare.
    ///   - rhs: Another value to compare.
    public static func == (a: ProjectDescription.Target, b: ProjectDescription.Target) -> Bool

    /// Encodes this value into the given encoder.
    ///
    /// If the value fails to encode anything, `encoder` will encode an empty
    /// keyed container in its place.
    ///
    /// This function throws an error if any values are invalid for the given
    /// encoder's format.
    ///
    /// - Parameter encoder: The encoder to write data to.
    public func encode(to encoder: Encoder) throws

    /// Creates a new instance by decoding from the given decoder.
    ///
    /// This initializer throws an error if reading from the decoder fails, or
    /// if the data read is corrupted or otherwise invalid.
    ///
    /// - Parameter decoder: The decoder to read data from.
    public init(from decoder: Decoder) throws
}
