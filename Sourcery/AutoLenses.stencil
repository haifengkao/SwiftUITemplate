// swiftlint:disable variable_name
import ProjectDescription

infix operator .~: MultiplicationPrecedence
infix operator |>: AdditionPrecedence

public struct Lens<whole, part> {
    let get: (whole) -> part
    let set: (part, whole) -> whole
}

public func + <A, B, C> (lhs: Lens<A, B>, rhs: Lens<B, C>) -> Lens<A, C> {
    return Lens<A, C>(
        get: { a in rhs.get(lhs.get(a)) },
        set: { (c, a) in lhs.set(rhs.set(c, lhs.get(a)), a) }
    )
}

public func .~ <A, B> (lhs: Lens<A, B>, rhs: B) -> (A) -> A {
    return { a in lhs.set(rhs, a) }
}

public func |> <A, B> (x: A, f: (A) -> B) -> B {
    return f(x)
}

public func |> <A, B, C> (f: @escaping (A) -> B, g: @escaping (B) -> C) -> (A) -> C {
    return { g(f($0)) }
}

{% for type in types.implementing.AutoLenses|struct %}
public extension {{ type.name }} {
    enum lens {
    {% for variable in type.storedVariables %}
        public static let {{ variable.name }} = Lens<{{type.name}}, {{variable.typeName}}>(
            get: { $0.{{variable.name}} },
            set: { {{variable.name}}, {{type.name|lowercase}} in
                .{{type.name|lowerFirstLetter}}({% for argument in type.storedVariables %}{{argument.name}}: {% if variable.name == argument.name %}{{variable.name}}{% else %}{{type.name|lowercase}}.{{argument.name}}{% endif %}{{ ', ' if not forloop.last }}{% endfor %})
            }
        ){% endfor %}
    }
}
{% endfor %}
